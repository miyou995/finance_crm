"""
Django settings for acm project.
Generated by 'django-admin startproject' using Django 4.0.3.
For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import re
import logging
from pathlib import Path
from django.template import base
from django.utils.translation import gettext_lazy as _
from django.contrib.messages import constants as messages

from celery.schedules import crontab

logging.getLogger("PIL.PngImagePlugin").setLevel(logging.CRITICAL)
logging.getLogger("fontTools.ttLib").setLevel(logging.CRITICAL)
logging.getLogger("fontTools.subset").setLevel(logging.CRITICAL)

base.tag_re = re.compile(base.tag_re.pattern, re.DOTALL)

BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

SECRET_KEY = "django-insecure-m@qx+wsk0=4r0)_7=#b*#6)tn6_n#@hv=*tt#!_2rotvo*4byl"
DEBUG = True
ALLOWED_HOSTS = ["*"]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

os.environ["DJANGO_RUNSERVER_HIDE_WARNING"] = "true"


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    "apps.billing",
    "apps.business",
    "apps.crm",
    "apps.core",
    "apps.leads",
    "apps.transactions",
    "apps.users",
    "apps.wilayas",
    "apps.tags",
    "apps.notification",
    "apps.appointment",
    "apps.subscription",
    
    # 'apps.assurance',
    "django_celery_beat",
    "rosetta",
    "import_export",
    "django_filters",
    "django_tables2",
    "widget_tweaks",
    "django_htmx",
    "tinymce",

    # Dev apps
    "django_extensions",
    "debug_toolbar",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # for translation
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",  # DJango debug toolbar
    "django.middleware.common.CommonMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "config.middleware.LoginRequiredMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "config.middleware.HtmxMessageMiddleware",
]

LOGIN_URL = "users:login"

LOGIN_EXEMPT_URLS = [
    "users:password_reset",
    "users:password_reset_done",
    "users:password_reset_complete",
    "users:password_reset_confirm",
]

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000"
# ]


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        "TIMEOUT": 600 * 15,  # in seconds: 60 * 15 (15 minutes)
    },
}


DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
DBBACKUP_STORAGE_OPTIONS = {"location": BASE_DIR / "backups"}


DBBACKUP_CONNECTORS = {
    "default": {
        "CONNECTOR": "dbbackup.db.postgresql.PgDumpBinaryConnector",
        # This is needed for restore on local dev machine
        "SINGLE_TRANSACTION": True,
    }
}

PUBLIC_SCHEMA_URLCONF = "config.urls_public"

ROOT_URLCONF = "config.urls"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "builtins": [
                "django.templatetags.static",
                "django.templatetags.i18n",
                "django.templatetags.l10n",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
# EMAIL_BACKEND = "django.core.mail.backends.dummy.EmailBackend"


ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = LOGIN_URL
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = None
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3


EMAIL_HOST = "mail.octopus-consulting.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "hello@octopus-consulting.com"
EMAIL_HOST_PASSWORD = "miyou0209"
DEFAULT_FROM_EMAIL = "hello@octopus-consulting.com"

# TIME_INPUT_FORMATS = ['%H:%M']
# TIME_INPUT_FORMATS = ('%H:%M',)


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {"format": "%(name)-12s %(levelname)-8s %(message)s"},
        "file": {"format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "console"},
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "formatter": "file",
            "filename": BASE_DIR / "debug.log",
        },
    },
    "root": {"level": "WARNING", "handlers": ["file"]},
    "django": {"level": "WARNING", "handlers": ["file"]},
}


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

AUTH_USER_MODEL = "users.User"

LANGUAGE_CODE = "fr"
LANGUAGE_COOKIE_NAME = "os_language"
LANGUAGE_SESSION_KEY = "_language"

LANGUAGES = (
    ("fr", _("French")),
    ("en", _("English")),
    # ('ar', _('Arabic')),
)

TIME_ZONE = "Africa/Algiers"
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [BASE_DIR / "locale"]

# real port : 6379
# CELERY

CELERY_BROKER_URL = "redis://localhost:6379"
BROKER_URL = CELERY_BROKER_URL
CELERY_RESULT_BACKEND = "redis://localhost:6379"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"
CELERY_APP_NAME = "config.celery:app"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

CELERY_BEAT_SCHEDULE = {
    "notifications_payment_5days": {
        "task": "apps.notification.tasks.send_notification_deadline_payment_5days",
        "schedule": crontab(hour=6, minute=0),
    },
    "notifications_payment_30days": {
        "task": "apps.notification.tasks.send_notification_deadline_payment_30days",
        "schedule": crontab(hour=6, minute=0),
    },
    "notifications_payment_2days": {
        "task": "apps.notification.tasks.send_notification_deadline_payment_2days",
        "schedule": crontab(hour=6, minute=0),
    },
    "notifications_payment_1day": {
        "task": "apps.notification.tasks.send_notification_deadline_payment_1day",
        "schedule": crontab(hour=6, minute=0),
    },
    "notifications_b2b_no_invoice_6months": {
        "task": "apps.notification.tasks.send_notification_b2b_no_invoice_6months",
        "schedule": crontab(hour=6, minute=0),
    },
}


DJANGO_TABLES2_TABLE_ATTRS = {
    "class": "table table-row-bordered table-hover border border-gray-300 shadow-sm",
    "td": {
        "class": "vertical-align-middle p-2",
    },
}


DJANGO_TABLES2_TEMPLATE = "tables/bootstrap_htmx.html"


STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "assets"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"
###

SITE_ID = 1


MESSAGE_TAGS = {
    messages.DEBUG: "info",
    messages.INFO: "info",
    messages.SUCCESS: "success",
    messages.WARNING: "warning",
    messages.ERROR: "danger",
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {"format": "%(name)-12s %(levelname)-8s %(message)s"},
        "file": {"format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "console"},
        "file": {
            "level": "INFO",
            "formatter": "file",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "debug.log",
            "maxBytes": 104857600,  # 100 mb
            "backupCount": 5,
        },
    },
    "root": {"level": "WARNING", "handlers": ["console", "file"]},
}
ADMINS = [("Taki", "inter.taki@gmail.com")]


INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    "localhost",
    # ...
]

# DEBUG_TOOLBAR_CONFIG = {
#     # "RENDER_PANELS": False,
#     # "SHOW_COLLAPSED": True,
#     "UPDATE_ON_FETCH": True,
#     # "INSERT_BEFORE": "</main>",
# }

USE_THOUSAND_SEPARATOR = True

try:
    from .local_settings import *
except ImportError:
    pass
